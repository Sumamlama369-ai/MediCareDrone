package com.medicaredrone.view;

import com.medicaredrone.controller.ValidationUtil;
import com.medicaredrone.model.DroneModel;
import com.medicaredrone.controller.algorithms.SelectionSort;
import com.medicaredrone.controller.algorithms.InsertionSort;
import com.medicaredrone.controller.algorithms.MergeSort;
import com.medicaredrone.controller.algorithms.BinarySearch;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.medicaredrone.controller.datastructure.CustomQueue;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

/**
 *
 * @author suman lama 23048591
 */
public class MediCareDrone extends javax.swing.JFrame {

    private List<DroneModel> droneList;
    private java.awt.CardLayout cardLayout;

    /**
     * Initializes the MediCareDrone GUI, setting up layout, data, and loading
     * screen. Configures the window size, sets a custom icon, and initializes
     * necessary components.
     */
    public MediCareDrone() {

        setLocation(200, 100);
        setResizable(false);
        initComponents();
        initializeLayout(); // Set up CardLayout and add screens
        initializeData(); // Initialize drone data and table
        startProgress();// Show loading screen and initiate progress

        // Set custom icon with resized dimensions
        try {
            ImageIcon icon = new ImageIcon(this.getClass().getResource("/com/collegeapp/resources/logo.png"));
            Image scaledIcon = icon.getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH); // Resize to 64x64
            this.setIconImage(scaledIcon);
        } catch (Exception e) {
            System.err.println("Icon image not found: " + e.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainScreen = new javax.swing.JPanel();
        pnlMainBar = new javax.swing.JPanel();
        lblMainSubTitle = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        lblDroneLogo = new javax.swing.JLabel();
        lblMainTitle = new javax.swing.JLabel();
        lblMainSubTitle1 = new javax.swing.JLabel();
        tabPaneMain = new javax.swing.JTabbedPane();
        pnlHome = new javax.swing.JPanel();
        lblHomeTitle = new javax.swing.JLabel();
        lblMainKeyPoints = new javax.swing.JLabel();
        lblHomeSubtitle1 = new javax.swing.JLabel();
        btnHomeExplore = new javax.swing.JButton();
        lblHomeBgImage = new javax.swing.JLabel();
        pnlStudentList = new javax.swing.JPanel();
        spTblStudent = new javax.swing.JScrollPane();
        tblDrone = new javax.swing.JTable();
        lblTblStudentTitle = new javax.swing.JLabel();
        pnlButton1 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnSupply = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtRequesterName = new javax.swing.JTextField();
        txtItemName = new javax.swing.JTextField();
        txtEmergencyContact = new javax.swing.JTextField();
        txtLocation = new javax.swing.JTextField();
        txtDroneId = new javax.swing.JTextField();
        txtLoadCapacity = new javax.swing.JTextField();
        lblErrorDroneId = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        cmbWeatherCondition = new javax.swing.JComboBox<>();
        lblErrorLocation = new javax.swing.JLabel();
        lblErrorEmergencyContact = new javax.swing.JLabel();
        lblErrorRequesterName = new javax.swing.JLabel();
        lblErrorItemName = new javax.swing.JLabel();
        lblErrorLoadCapacity = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        btnSort = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        pnlAdminControl = new javax.swing.JPanel();
        pnlButton = new javax.swing.JPanel();
        VivaInfoAfter = new javax.swing.JLabel();
        lblAdminDashboard = new javax.swing.JLabel();
        VivaInfoBefore = new javax.swing.JLabel();
        btnLaunch = new javax.swing.JButton();
        lblDashboardImageUp = new javax.swing.JLabel();
        lblDashImage = new javax.swing.JLabel();
        formTitle = new javax.swing.JLabel();
        spTblStudentVivaList = new javax.swing.JScrollPane();
        tblStudentVivaList = new javax.swing.JTable();
        spTblStudentVivaList1 = new javax.swing.JScrollPane();
        tblStudentAfterVivaList = new javax.swing.JTable();
        pnlAboutUs = new javax.swing.JPanel();
        lblSumanImage = new javax.swing.JLabel();
        lblSumanDirector = new javax.swing.JLabel();
        pnlPhilosophy = new javax.swing.JPanel();
        lblOurPhilosophy = new javax.swing.JLabel();
        lblPhilosophy = new javax.swing.JLabel();
        lblQuardTitle = new javax.swing.JLabel();
        lblBatteryTitle = new javax.swing.JLabel();
        lblPropeller = new javax.swing.JLabel();
        lblMotorProtection = new javax.swing.JLabel();
        lblDroneBackground = new javax.swing.JLabel();
        lblBatterySubTitle = new javax.swing.JLabel();
        lblPropellerSubTitle = new javax.swing.JLabel();
        lblMotorProtectionSubTitle = new javax.swing.JLabel();
        lblMotorSubTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        pnlVivaList = new javax.swing.JPanel();
        spTblStudentViva1 = new javax.swing.JScrollPane();
        tblDroneInformation = new javax.swing.JTable();
        lblSort = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        cmbSortBy = new javax.swing.JComboBox<>();
        cmbSelectionSortingOrder = new javax.swing.JComboBox<>();
        txtSearchValue = new javax.swing.JTextField();
        cmbSearchBy = new javax.swing.JComboBox<>();
        btnViewDetails = new javax.swing.JButton();
        lblDroneInformation = new javax.swing.JLabel();
        btnSorting = new javax.swing.JButton();
        btnSearching = new javax.swing.JButton();
        pnlBackgroundColor = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jtoolRedColor = new javax.swing.JToolBar();
        jtoolRedColor1 = new javax.swing.JToolBar();
        pnlLoginScreen = new javax.swing.JPanel();
        lblLoginTitle = new javax.swing.JLabel();
        txtFldLoginUsername = new javax.swing.JTextField();
        pwdFldLogin = new javax.swing.JPasswordField();
        lblLoginSubTitle = new javax.swing.JLabel();
        lblLoginForgotPwd = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        lblLoginError = new javax.swing.JLabel();
        lblSlogan = new javax.swing.JLabel();
        lblLoginBgImage = new javax.swing.JLabel();
        pnlLoadingScreen = new javax.swing.JPanel();
        pgBarSplashScreen = new javax.swing.JProgressBar(0,100);
        lblLoading = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblcollegelogo = new javax.swing.JLabel();
        lblLoadingBgImage = new javax.swing.JLabel();

        pnlMainScreen.setBackground(new java.awt.Color(120, 120, 120));
        pnlMainScreen.setMaximumSize(new java.awt.Dimension(1220, 750));
        pnlMainScreen.setMinimumSize(new java.awt.Dimension(1220, 750));
        pnlMainScreen.setPreferredSize(new java.awt.Dimension(1220, 750));
        pnlMainScreen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlMainBar.setBackground(new java.awt.Color(255, 255, 255));

        lblMainSubTitle.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
        lblMainSubTitle.setForeground(new java.awt.Color(26, 82, 117));
        lblMainSubTitle.setText("Medi-");

        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/lblLogOut.png"))); // NOI18N
        btnLogout.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        lblDroneLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/droneLogo.png"))); // NOI18N

        lblMainTitle.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
        lblMainTitle.setForeground(new java.awt.Color(26, 82, 117));
        lblMainTitle.setText("Welcome to ");

        lblMainSubTitle1.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
        lblMainSubTitle1.setForeground(new java.awt.Color(25, 155, 216));
        lblMainSubTitle1.setText("DroneCare");

        javax.swing.GroupLayout pnlMainBarLayout = new javax.swing.GroupLayout(pnlMainBar);
        pnlMainBar.setLayout(pnlMainBarLayout);
        pnlMainBarLayout.setHorizontalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addComponent(lblDroneLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addComponent(lblMainTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMainSubTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMainSubTitle1)
                .addGap(429, 429, 429)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlMainBarLayout.setVerticalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addComponent(lblDroneLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMainSubTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMainSubTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(btnLogout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        pnlMainScreen.add(pnlMainBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1225, -1));

        tabPaneMain.setBackground(new java.awt.Color(120, 120, 120));
        tabPaneMain.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 255), 0, true));
        tabPaneMain.setForeground(new java.awt.Color(255, 255, 255));
        tabPaneMain.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        pnlHome.setBackground(new java.awt.Color(0, 0, 0));
        pnlHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblHomeTitle.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblHomeTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblHomeTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHomeTitle.setText("<html>Fast. Secure.<br>\nintelligent.</html>");
        pnlHome.add(lblHomeTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 320, 123));

        lblMainKeyPoints.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblMainKeyPoints.setForeground(new java.awt.Color(255, 255, 255));
        lblMainKeyPoints.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMainKeyPoints.setText("<html>  \n-> For Timely Healthcare Delivery &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -> For Life-Saving Technology  \n<br><br>  \n-> For Reliable Drone Operations &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-> For Smarter Medical Solutions  \n</html>");
        pnlHome.add(lblMainKeyPoints, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, -1, 123));

        lblHomeSubtitle1.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        lblHomeSubtitle1.setForeground(new java.awt.Color(255, 255, 255));
        lblHomeSubtitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHomeSubtitle1.setText("Medical Drone Delivery");
        pnlHome.add(lblHomeSubtitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 230, 60));

        btnHomeExplore.setBackground(new java.awt.Color(0, 0, 0));
        btnHomeExplore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/buttonImage.png"))); // NOI18N
        btnHomeExplore.setBorder(null);
        btnHomeExplore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeExploreActionPerformed(evt);
            }
        });
        pnlHome.add(btnHomeExplore, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 310, 160, 40));

        lblHomeBgImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/HomeBgImage.jpg"))); // NOI18N
        lblHomeBgImage.setText("jLabel1");
        pnlHome.add(lblHomeBgImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 1110, 590));

        tabPaneMain.addTab("Home", pnlHome);

        pnlStudentList.setBackground(new java.awt.Color(255, 255, 255));
        pnlStudentList.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblDrone.setBackground(new java.awt.Color(153, 204, 255));
        tblDrone.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblDrone.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DroneID", "Status", "RequesterName", "ItemName", "Location", "EmergencyContact", "WeatherCondition", "LoadCapacity(kg)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDrone.setGridColor(new java.awt.Color(0, 0, 0));
        tblDrone.setPreferredSize(new java.awt.Dimension(340, 619));
        tblDrone.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblDrone.setSelectionForeground(new java.awt.Color(234, 192, 32));
        tblDrone.setShowGrid(true);
        tblDrone.getTableHeader().setReorderingAllowed(false);
        tblDrone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDroneMouseClicked(evt);
            }
        });
        spTblStudent.setViewportView(tblDrone);
        if (tblDrone.getColumnModel().getColumnCount() > 0) {
            tblDrone.getColumnModel().getColumn(0).setResizable(false);
            tblDrone.getColumnModel().getColumn(1).setResizable(false);
            tblDrone.getColumnModel().getColumn(2).setResizable(false);
            tblDrone.getColumnModel().getColumn(3).setResizable(false);
            tblDrone.getColumnModel().getColumn(4).setResizable(false);
            tblDrone.getColumnModel().getColumn(4).setPreferredWidth(40);
        }

        pnlStudentList.add(spTblStudent, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 68, 1197, 263));

        lblTblStudentTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTblStudentTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTblStudentTitle.setForeground(new java.awt.Color(26, 82, 117));
        lblTblStudentTitle.setText("Comprehensive Drone Details and Deployment Information >>");
        pnlStudentList.add(lblTblStudentTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 23, 720, 33));

        btnAdd.setBackground(new java.awt.Color(0, 153, 255));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(255, 102, 102));
        btnRemove.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(255, 255, 255));
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnSupply.setBackground(new java.awt.Color(0, 153, 255));
        btnSupply.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSupply.setForeground(new java.awt.Color(255, 255, 255));
        btnSupply.setText("Supply");
        btnSupply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupplyActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(255, 102, 102));
        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 153, 255));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButton1Layout = new javax.swing.GroupLayout(pnlButton1);
        pnlButton1.setLayout(pnlButton1Layout);
        pnlButton1Layout.setHorizontalGroup(
            pnlButton1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButton1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(pnlButton1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSupply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        pnlButton1Layout.setVerticalGroup(
            pnlButton1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButton1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSupply, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRemove)
                .addGap(18, 18, 18)
                .addComponent(btnClear)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pnlStudentList.add(pnlButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 343, -1, -1));

        txtRequesterName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "RequesterName", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(26, 82, 117))); // NOI18N
        pnlStudentList.add(txtRequesterName, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 494, 149, 60));

        txtItemName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ItemName", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(26, 82, 117))); // NOI18N
        pnlStudentList.add(txtItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(473, 494, 149, 60));

        txtEmergencyContact.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "EmergencyContact", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(26, 82, 117))); // NOI18N
        txtEmergencyContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmergencyContactActionPerformed(evt);
            }
        });
        pnlStudentList.add(txtEmergencyContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(956, 395, 149, 60));

        txtLocation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Location", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(26, 83, 117))); // NOI18N
        pnlStudentList.add(txtLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(719, 395, 149, 60));

        txtDroneId.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DroneID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(26, 82, 117))); // NOI18N
        pnlStudentList.add(txtDroneId, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 395, 149, 60));

        txtLoadCapacity.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "LoadCapacity(kg)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(26, 82, 117))); // NOI18N
        pnlStudentList.add(txtLoadCapacity, new org.netbeans.lib.awtextra.AbsoluteConstraints(956, 496, 149, 60));
        pnlStudentList.add(lblErrorDroneId, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 452, 211, 24));

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Completed", "Pending", "Failed" }));
        cmbStatus.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(26, 82, 117))); // NOI18N
        pnlStudentList.add(cmbStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(473, 393, 149, 60));

        cmbWeatherCondition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sunny", "Cloudy", "Rainy", "Snowy", "Foggy", "Windy" }));
        cmbWeatherCondition.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Weather Condition", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(26, 82, 117))); // NOI18N
        pnlStudentList.add(cmbWeatherCondition, new org.netbeans.lib.awtextra.AbsoluteConstraints(719, 492, 149, 60));
        pnlStudentList.add(lblErrorLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(719, 452, 234, 24));
        pnlStudentList.add(lblErrorEmergencyContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(959, 452, 232, 28));
        pnlStudentList.add(lblErrorRequesterName, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 560, 226, 25));
        pnlStudentList.add(lblErrorItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 560, 210, 25));
        pnlStudentList.add(lblErrorLoadCapacity, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 550, 171, 40));
        pnlStudentList.add(lblMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(496, 343, 331, 32));

        btnSort.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/sorting.jpg"))); // NOI18N
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });
        pnlStudentList.add(btnSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 10, 60, 40));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/searching.jpg"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        pnlStudentList.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 10, 60, 40));

        tabPaneMain.addTab("Dashboard", pnlStudentList);

        pnlAdminControl.setBackground(new java.awt.Color(255, 255, 255));
        pnlAdminControl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(234, 192, 32)));

        VivaInfoAfter.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        VivaInfoAfter.setForeground(new java.awt.Color(26, 82, 117));
        VivaInfoAfter.setText("Completed Deployment>>");

        lblAdminDashboard.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblAdminDashboard.setForeground(new java.awt.Color(26, 155, 216));
        lblAdminDashboard.setText("Execution Dashboard");

        VivaInfoBefore.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        VivaInfoBefore.setForeground(new java.awt.Color(26, 82, 117));
        VivaInfoBefore.setText("Pending Deployment>>");

        btnLaunch.setBackground(new java.awt.Color(0, 204, 255));
        btnLaunch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLaunch.setForeground(new java.awt.Color(255, 255, 255));
        btnLaunch.setText("Launch");
        btnLaunch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaunchActionPerformed(evt);
            }
        });

        lblDashboardImageUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/dashImg1 (1).png"))); // NOI18N

        lblDashImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/dashImg2 (1).png"))); // NOI18N

        javax.swing.GroupLayout pnlButtonLayout = new javax.swing.GroupLayout(pnlButton);
        pnlButton.setLayout(pnlButtonLayout);
        pnlButtonLayout.setHorizontalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlButtonLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblAdminDashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlButtonLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(VivaInfoAfter))
                    .addGroup(pnlButtonLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VivaInfoBefore)
                            .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnLaunch, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlButtonLayout.createSequentialGroup()
                                    .addGap(19, 19, 19)
                                    .addComponent(lblDashboardImageUp, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblDashImage, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlButtonLayout.setVerticalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblAdminDashboard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VivaInfoBefore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblDashboardImageUp, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLaunch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VivaInfoAfter)
                .addGap(18, 18, 18)
                .addComponent(lblDashImage, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        formTitle.setFont(new java.awt.Font("Segoe UI", 1, 26)); // NOI18N
        formTitle.setForeground(new java.awt.Color(255, 102, 102));
        formTitle.setText("-- Drone Deployment List--");

        tblStudentVivaList.setBackground(new java.awt.Color(153, 204, 255));
        tblStudentVivaList.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblStudentVivaList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DroneID", "Status", "RequesterName", "ItemName", "Location", "EmergencyContact", "WeatherCondition", "LoadCapacity(kg)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStudentVivaList.setGridColor(new java.awt.Color(0, 0, 0));
        tblStudentVivaList.setPreferredSize(new java.awt.Dimension(340, 619));
        tblStudentVivaList.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblStudentVivaList.setSelectionForeground(new java.awt.Color(234, 192, 32));
        tblStudentVivaList.setShowGrid(true);
        tblStudentVivaList.getTableHeader().setReorderingAllowed(false);
        spTblStudentVivaList.setViewportView(tblStudentVivaList);

        tblStudentAfterVivaList.setBackground(new java.awt.Color(153, 204, 255));
        tblStudentAfterVivaList.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblStudentAfterVivaList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DroneID", "Status", "RequesterName", "ItemName", "Location", "EmergencyContact", "WeatherCondition", "LoadCapacity(kg)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStudentAfterVivaList.setGridColor(new java.awt.Color(0, 0, 0));
        tblStudentAfterVivaList.setPreferredSize(new java.awt.Dimension(340, 619));
        tblStudentAfterVivaList.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblStudentAfterVivaList.setSelectionForeground(new java.awt.Color(234, 192, 32));
        tblStudentAfterVivaList.setShowGrid(true);
        tblStudentAfterVivaList.getTableHeader().setReorderingAllowed(false);
        spTblStudentVivaList1.setViewportView(tblStudentAfterVivaList);
        if (tblStudentAfterVivaList.getColumnModel().getColumnCount() > 0) {
            tblStudentAfterVivaList.getColumnModel().getColumn(0).setResizable(false);
            tblStudentAfterVivaList.getColumnModel().getColumn(1).setResizable(false);
            tblStudentAfterVivaList.getColumnModel().getColumn(2).setResizable(false);
            tblStudentAfterVivaList.getColumnModel().getColumn(3).setResizable(false);
            tblStudentAfterVivaList.getColumnModel().getColumn(4).setResizable(false);
            tblStudentAfterVivaList.getColumnModel().getColumn(4).setPreferredWidth(40);
        }

        javax.swing.GroupLayout pnlAdminControlLayout = new javax.swing.GroupLayout(pnlAdminControl);
        pnlAdminControl.setLayout(pnlAdminControlLayout);
        pnlAdminControlLayout.setHorizontalGroup(
            pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminControlLayout.createSequentialGroup()
                .addComponent(pnlButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAdminControlLayout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(formTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAdminControlLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spTblStudentVivaList1, javax.swing.GroupLayout.PREFERRED_SIZE, 979, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spTblStudentVivaList, javax.swing.GroupLayout.PREFERRED_SIZE, 979, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(9755, Short.MAX_VALUE))
        );
        pnlAdminControlLayout.setVerticalGroup(
            pnlAdminControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminControlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblStudentVivaList, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(spTblStudentVivaList1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addComponent(pnlButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabPaneMain.addTab("Launch View", pnlAdminControl);

        pnlAboutUs.setBackground(new java.awt.Color(255, 255, 255));
        pnlAboutUs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(234, 192, 32)));
        pnlAboutUs.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSumanImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/sumanDirector.png"))); // NOI18N
        lblSumanImage.setText("jLabel1");
        pnlAboutUs.add(lblSumanImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 189, 160));

        lblSumanDirector.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblSumanDirector.setForeground(new java.awt.Color(51, 51, 51));
        lblSumanDirector.setText("Suman Lama (Director)");
        pnlAboutUs.add(lblSumanDirector, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, 180, -1));

        lblOurPhilosophy.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblOurPhilosophy.setText("Our Philosophy");

        lblPhilosophy.setFont(new java.awt.Font("Segoe UI", 0, 17)); // NOI18N
        lblPhilosophy.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPhilosophy.setText("<html>At MediDroneCare, we use innovative drone technology to deliver life-saving medical supplies \nto those in urgent need, no matter the location or situation. Our focus is on efficiency, compassion, and\n overcoming logistical barriers to ensure that remote and disaster-stricken areas are never left behind..</html>");

        javax.swing.GroupLayout pnlPhilosophyLayout = new javax.swing.GroupLayout(pnlPhilosophy);
        pnlPhilosophy.setLayout(pnlPhilosophyLayout);
        pnlPhilosophyLayout.setHorizontalGroup(
            pnlPhilosophyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPhilosophyLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlPhilosophyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOurPhilosophy, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhilosophy, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnlPhilosophyLayout.setVerticalGroup(
            pnlPhilosophyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPhilosophyLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblOurPhilosophy, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPhilosophy, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlAboutUs.add(pnlPhilosophy, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, -1, -1));

        lblQuardTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblQuardTitle.setForeground(new java.awt.Color(153, 153, 153));
        lblQuardTitle.setText("A New Era of QuardCopters");
        pnlAboutUs.add(lblQuardTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, 330, 30));

        lblBatteryTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblBatteryTitle.setText("Battery");
        pnlAboutUs.add(lblBatteryTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 230, 100, 20));

        lblPropeller.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPropeller.setText("Propeller");
        pnlAboutUs.add(lblPropeller, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 310, 90, 20));

        lblMotorProtection.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblMotorProtection.setText("Motor Protection Cover");
        pnlAboutUs.add(lblMotorProtection, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 380, 150, -1));

        lblDroneBackground.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDroneBackground.setText("Motor");
        pnlAboutUs.add(lblDroneBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 460, 120, 20));

        lblBatterySubTitle.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lblBatterySubTitle.setText("<html>A high-capacity battery that allows the quardcopter to stay in the air for more than 6 hours</html>");
        pnlAboutUs.add(lblBatterySubTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 240, 290, 60));

        lblPropellerSubTitle.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lblPropellerSubTitle.setText("<html>A special shaped propeller that reduces battery consumption.</html>");
        pnlAboutUs.add(lblPropellerSubTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 330, 260, 30));

        lblMotorProtectionSubTitle.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lblMotorProtectionSubTitle.setText("<html>Formidable and durable composite housing protects the propeller and motor.</html>");
        pnlAboutUs.add(lblMotorProtectionSubTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 400, 270, 40));

        lblMotorSubTitle.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        lblMotorSubTitle.setText("<html>The latest motor provides stable traction at any speed.</html>");
        pnlAboutUs.add(lblMotorSubTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 480, 280, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/droneBack.png"))); // NOI18N
        pnlAboutUs.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 50, 680, 520));

        tabPaneMain.addTab("About Us", pnlAboutUs);

        pnlVivaList.setBackground(new java.awt.Color(255, 255, 255));
        pnlVivaList.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblDroneInformation.setBackground(new java.awt.Color(153, 204, 255));
        tblDroneInformation.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblDroneInformation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drone ID", "Status", "RequesterName", "ItemName", "Location", "EmergencyContact", "WeatherCondition", "LoadCapacity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDroneInformation.setGridColor(new java.awt.Color(0, 0, 0));
        tblDroneInformation.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblDroneInformation.setSelectionForeground(new java.awt.Color(234, 192, 32));
        tblDroneInformation.setShowGrid(true);
        tblDroneInformation.getTableHeader().setReorderingAllowed(false);
        spTblStudentViva1.setViewportView(tblDroneInformation);
        if (tblDroneInformation.getColumnModel().getColumnCount() > 0) {
            tblDroneInformation.getColumnModel().getColumn(0).setResizable(false);
            tblDroneInformation.getColumnModel().getColumn(1).setResizable(false);
            tblDroneInformation.getColumnModel().getColumn(2).setResizable(false);
            tblDroneInformation.getColumnModel().getColumn(3).setResizable(false);
            tblDroneInformation.getColumnModel().getColumn(4).setResizable(false);
            tblDroneInformation.getColumnModel().getColumn(4).setPreferredWidth(40);
        }

        pnlVivaList.add(spTblStudentViva1, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 294, 1175, 323));

        lblSort.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblSort.setText("Sort");
        pnlVivaList.add(lblSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 25, 66, 27));

        lblSearch.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblSearch.setText("Search");
        pnlVivaList.add(lblSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(881, 25, 62, 27));

        cmbSortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Drone ID", "ItemName", "Location" }));
        cmbSortBy.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SortBy", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        pnlVivaList.add(cmbSortBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(83, 87, 160, 60));

        cmbSelectionSortingOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));
        cmbSelectionSortingOrder.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Sorting Order", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        pnlVivaList.add(cmbSelectionSortingOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 87, 164, 60));

        txtSearchValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter value to search", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        txtSearchValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchValueActionPerformed(evt);
            }
        });
        pnlVivaList.add(txtSearchValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(679, 84, 180, 60));

        cmbSearchBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Drone ID", "ItemName", "Location" }));
        cmbSearchBy.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search By", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        pnlVivaList.add(cmbSearchBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 85, 170, 60));

        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });
        pnlVivaList.add(btnViewDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 265, -1, -1));

        lblDroneInformation.setBackground(new java.awt.Color(51, 51, 51));
        lblDroneInformation.setFont(new java.awt.Font("Segoe UI", 0, 21)); // NOI18N
        lblDroneInformation.setForeground(new java.awt.Color(102, 102, 102));
        lblDroneInformation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDroneInformation.setText("Drone Information Collection");
        pnlVivaList.add(lblDroneInformation, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 260, 1030, -1));

        btnSorting.setBackground(new java.awt.Color(255, 153, 153));
        btnSorting.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSorting.setForeground(new java.awt.Color(255, 255, 255));
        btnSorting.setText("Sort");
        btnSorting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortingActionPerformed(evt);
            }
        });
        pnlVivaList.add(btnSorting, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 159, 203, 47));

        btnSearching.setBackground(new java.awt.Color(51, 153, 255));
        btnSearching.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSearching.setForeground(new java.awt.Color(255, 255, 255));
        btnSearching.setText("Search");
        btnSearching.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchingActionPerformed(evt);
            }
        });
        pnlVivaList.add(btnSearching, new org.netbeans.lib.awtextra.AbsoluteConstraints(828, 159, 208, 48));

        jToolBar1.setBackground(new java.awt.Color(51, 153, 255));
        jToolBar1.setRollover(true);

        jtoolRedColor.setBackground(new java.awt.Color(255, 153, 153));
        jtoolRedColor.setRollover(true);

        jtoolRedColor1.setBackground(new java.awt.Color(255, 153, 153));
        jtoolRedColor1.setRollover(true);
        jtoolRedColor.add(jtoolRedColor1);

        javax.swing.GroupLayout pnlBackgroundColorLayout = new javax.swing.GroupLayout(pnlBackgroundColor);
        pnlBackgroundColor.setLayout(pnlBackgroundColorLayout);
        pnlBackgroundColorLayout.setHorizontalGroup(
            pnlBackgroundColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundColorLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jtoolRedColor, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        pnlBackgroundColorLayout.setVerticalGroup(
            pnlBackgroundColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundColorLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(pnlBackgroundColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtoolRedColor, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(167, Short.MAX_VALUE))
        );

        pnlVivaList.add(pnlBackgroundColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 1170, 210));

        tabPaneMain.addTab("Drone List", pnlVivaList);

        pnlMainScreen.add(tabPaneMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 80, -1, 670));

        pnlLoginScreen.setBackground(new java.awt.Color(236, 237, 239));
        pnlLoginScreen.setMaximumSize(new java.awt.Dimension(1220, 750));
        pnlLoginScreen.setMinimumSize(new java.awt.Dimension(1220, 750));
        pnlLoginScreen.setPreferredSize(new java.awt.Dimension(1220, 750));
        pnlLoginScreen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblLoginTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblLoginTitle.setForeground(new java.awt.Color(102, 204, 255));
        lblLoginTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginTitle.setText("Sign in to MediCareDrone");
        pnlLoginScreen.add(lblLoginTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(643, 110, 420, 53));

        txtFldLoginUsername.setForeground(new java.awt.Color(102, 102, 102));
        txtFldLoginUsername.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2), "Username", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N
        txtFldLoginUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldLoginUsernameActionPerformed(evt);
            }
        });
        pnlLoginScreen.add(txtFldLoginUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 230, 262, 59));

        pwdFldLogin.setForeground(new java.awt.Color(102, 102, 102));
        pwdFldLogin.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2), "Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N
        pwdFldLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdFldLoginActionPerformed(evt);
            }
        });
        pnlLoginScreen.add(pwdFldLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 310, 262, 59));

        lblLoginSubTitle.setBackground(new java.awt.Color(234, 192, 32));
        lblLoginSubTitle.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblLoginSubTitle.setForeground(new java.awt.Color(153, 204, 255));
        lblLoginSubTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginSubTitle.setText("Please enter your login details below using this app.");
        pnlLoginScreen.add(lblLoginSubTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 160, 452, -1));

        lblLoginForgotPwd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLoginForgotPwd.setForeground(new java.awt.Color(153, 153, 153));
        lblLoginForgotPwd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginForgotPwd.setText("Forgot your password?");
        pnlLoginScreen.add(lblLoginForgotPwd, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 480, 229, -1));

        btnLogin.setBackground(new java.awt.Color(102, 204, 255));
        btnLogin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLogin.setForeground(new java.awt.Color(255, 255, 255));
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        pnlLoginScreen.add(btnLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 410, 260, 50));

        lblLoginError.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLoginError.setForeground(new java.awt.Color(255, 0, 0));
        lblLoginError.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pnlLoginScreen.add(lblLoginError, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 380, 320, 22));

        lblSlogan.setBackground(new java.awt.Color(255, 255, 255));
        lblSlogan.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        lblSlogan.setForeground(new java.awt.Color(255, 255, 255));
        lblSlogan.setText("<html>Your health, our mission. <br>Let's soar together toward a better tomorrow.</html>");
        pnlLoginScreen.add(lblSlogan, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 460, 380, 70));

        lblLoginBgImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/loginBgimage.png"))); // NOI18N
        pnlLoginScreen.add(lblLoginBgImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 1050, 730));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1220, 750));
        setSize(new java.awt.Dimension(1220, 750));

        pnlLoadingScreen.setBackground(new java.awt.Color(204, 204, 204));
        pnlLoadingScreen.setMaximumSize(new java.awt.Dimension(1220, 750));
        pnlLoadingScreen.setMinimumSize(new java.awt.Dimension(1220, 750));
        pnlLoadingScreen.setPreferredSize(new java.awt.Dimension(1220, 750));
        pnlLoadingScreen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pgBarSplashScreen.setStringPainted(true);
        pgBarSplashScreen.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pgBarSplashScreen.setForeground(new java.awt.Color(0, 153, 0));
        pgBarSplashScreen.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        pnlLoadingScreen.add(pgBarSplashScreen, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 520, 870, 31));

        lblLoading.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblLoading.setForeground(new java.awt.Color(255, 255, 255));
        lblLoading.setText("Loading...");
        pnlLoadingScreen.add(lblLoading, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 560, 100, -1));

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(102, 102, 102));
        lblTitle.setText("\"Delivering Hope and Healing, Powered by the Wings of Innovation\"");
        pnlLoadingScreen.add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, 600, -1));

        lblcollegelogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/Screenshot 2024-12-09 032557.png"))); // NOI18N
        pnlLoadingScreen.add(lblcollegelogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 210, -1));

        lblLoadingBgImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/loadingBg1.jpg"))); // NOI18N
        lblLoadingBgImage.setText(" ");
        pnlLoadingScreen.add(lblLoadingBgImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -40, 1220, 770));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
// Method to set up the CardLayout and add panels

    /**
     * Sets up the CardLayout for the MediCareDrone GUI, adding panels for
     * different screens (loading, login, and main). Starts with the loading
     * screen visible.
     */
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(pnlLoadingScreen, "LoadingScreen");
        getContentPane().add(pnlLoginScreen, "LoginScreen");
        getContentPane().add(pnlMainScreen, "MainScreen");

        // Start with the loading screen
        cardLayout.show(getContentPane(), "LoadingScreen");
    }

    /**
     * Initializes the drone data, including creating a list of drone models and
     * setting up the table model with updated column names. Adds example drone
     * data to populate the table.
     */
    // Method to initialize data, including student list and table
    private void initializeData() {
        droneList = new LinkedList<>();

        // Create a table model with updated column names
        DefaultTableModel model = new DefaultTableModel(
                new Object[][]{}, // No initial data
                new String[]{ // Updated column names
                    "Drone ID", "Status", "RequesterName",
                    "ItemName", "Location", "EmergencyContact",
                    "WeatherCondition", "LoadCapacity(kg)"
                }
        );
        tblDrone.setModel(model);

        // Example data for the updated table
        registerDrone(new DroneModel(23048599, "Deployed", "David Miller", "Medical Equipment",
                "Bharatpur", "9823456789", "Overcast", 11.5));
        registerDrone(new DroneModel(23048592, "Deployed", "Jane Smith", "Medicine",
                "Pokhara", "9873673826", "Rainy", 10.0));
        registerDrone(new DroneModel(23048598, "Active", "Maya Tamang", "Surgical Supplies",
                "Nepalgunj", "9856789012", "Clear", 9.0));
        registerDrone(new DroneModel(23048593, "Deployed", "Suman Lama", "Blood bag",
                "Sindhuli", "9803729956", "Cloudy", 12));
        registerDrone(new DroneModel(23048596, "Standby", "Priya Sharma", "Emergency Kit",
                "Biratnagar", "9867543210", "Foggy", 6.5));
        registerDrone(new DroneModel(23048597, "Deployed", "Alex Chen", "Oxygen Cylinders",
                "Dharan", "9834567890", "Partly Cloudy", 15.0));
        registerDrone(new DroneModel(23048595, "Maintenance", "Sarah Wilson", "Vaccines",
                "Butwal", "9812345678", "Windy", 7.0));
        registerDrone(new DroneModel(23048591, "Active", "John Doe", "First Aid Kit",
                "Kathmandu", "9876938467", "Sunny", 5.5));
    }

    /**
     * Simulates a loading progress by updating a progress bar over time. Runs
     * in a background thread to avoid blocking the UI, and transitions to the
     * login screen once the progress reaches 100%.
     */
    // Method to simulate loading progress
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay for progress bar
                    publish(i);
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                pgBarSplashScreen.setValue(progress);
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute();
    }

    /**
     * Adds a drone's data to the drone list and updates the table with the
     * drone's details. This method populates the table with new drone
     * information, including the drone ID, status, requester name, item name,
     * location, emergency contact, weather condition, and load capacity.
     *
     * @param drone The DroneModel object containing the drone's information.
     */
    // Method to add drone data and populate the table
    private void registerDrone(DroneModel student) {
        droneList.add(student);
        DefaultTableModel model = (DefaultTableModel) tblDrone.getModel();
        model.addRow(new Object[]{
            student.getDroneId(), student.getStatus(), student.getRequesterName(),
            student.getItemName(), student.getLocation(), student.getEmergencyContact(),
            student.getWeatherCondition(), student.getLoadCapacity()
        });
    }

    /**
     * Switches the current screen to the specified screen using CardLayout. The
     * method displays the screen identified by the provided screen name.
     *
     * @param screenName The name of the screen to be displayed (e.g.,
     * "LoadingScreen", "LoginScreen").
     */
    // Method to switch screens
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }

    /**
     * Action event handler for the Login button. This method processes the
     * login attempt by verifying the entered username and password. If the
     * credentials are correct, it switches to the main screen; otherwise, it
     * shows an error message.
     *
     * @param evt The event triggered by the Login button click.
     */
    //Action event for Login button
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // Get the username and password input
        String username = txtFldLoginUsername.getText();
        String password = new String(pwdFldLogin.getPassword());

        // Check if username or password is empty
        if (username.isEmpty() || password.isEmpty()) {
            lblLoginError.setText("Please enter your username and password.");
        } // Check if username and password are incorrect
        else if (!username.equals("admin") || !password.equals("admin")) {
            lblLoginError.setText("Username and password mismatch.");
        } // If credentials are correct, proceed to load the main screen
        else {
            lblLoginError.setText(""); // Clear any previous error messages
            loadScreen("MainScreen"); // Load the main screen
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    /**
     * Action event handler for the Logout button. This method clears the
     * username and password fields and switches the screen back to the Login
     * screen. It simulates logging out by resetting the login form and loading
     * the login screen.
     *
     * @param evt The event triggered by the Logout button click.
     */
    //Action event for Logout button
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        pwdFldLogin.setText("");
        txtFldLoginUsername.setText("");
        loadScreen("LoginScreen"); // Load the main screen
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void pwdFldLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdFldLoginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwdFldLoginActionPerformed

    private void txtFldLoginUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldLoginUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldLoginUsernameActionPerformed

    /**
     * Action event handler for the Supply button. This method transfers drone
     * data from the main drone table (tblDrone) to the inspection list table
     * (tblDroneInspectionList) and enqueues the drone objects into the
     * inspection queue. It prompts the user for confirmation before performing
     * the action.
     *
     * The method performs the following: 1. Prompts the user with a
     * confirmation dialog before transferring data. 2. Clears any existing data
     * in the inspection list table to avoid duplicates. 3. Copies each row from
     * the drone table to the inspection list table. 4. Creates a DroneModel
     * object for each row and enqueues it to the inspection queue. 5. Displays
     * a success message upon successful data transfer. 6. Cancels the action if
     * the user selects 'No' in the confirmation dialog.
     *
     * @param evt The event triggered by the Supply button click.
     */
    private void btnSupplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupplyActionPerformed
        // TODO add your handling code here:
        // Get the table models for tblDrone and tblDroneInspectionList
        lblErrorDroneId.setText("");
        int response = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to transfer data to the Inspection List?",
                "Confirm Action",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // If user selects 'Yes' (response = JOptionPane.YES_OPTION)
        if (response == JOptionPane.YES_OPTION) {

            DefaultTableModel droneModel = (DefaultTableModel) tblDrone.getModel();
            DefaultTableModel inspectionModel = (DefaultTableModel) tblStudentVivaList.getModel();

            // Clear existing rows in tblDroneInspectionList to avoid duplicates
            inspectionModel.setRowCount(0);

            // Loop through rows in tblDrone and copy to tblDroneInspectionList
            for (int i = 0; i < droneModel.getRowCount(); i++) {
                Object[] rowData = new Object[droneModel.getColumnCount()];
                for (int j = 0; j < droneModel.getColumnCount(); j++) {
                    rowData[j] = droneModel.getValueAt(i, j); // Copy cell data
                }
                inspectionModel.addRow(rowData); // Add the row to tblDroneInspectionList

                // Create a DroneModel object and enqueue to inspectQueue
                DroneModel drone = new DroneModel(
                        (int) droneModel.getValueAt(i, 0),
                        (String) droneModel.getValueAt(i, 1),
                        (String) droneModel.getValueAt(i, 2),
                        (String) droneModel.getValueAt(i, 3),
                        (String) droneModel.getValueAt(i, 4),
                        (String) droneModel.getValueAt(i, 5),
                        (String) droneModel.getValueAt(i, 6),
                        (double) droneModel.getValueAt(i, 7)
                );
                vivaQueue.enQueue(drone);  // Enqueue the drone to the queue
            }

            // Show a confirmation dialog to the user
            lblErrorDroneId.setText("Data successfully transferred to Inspection List!");
            lblErrorDroneId.setForeground(Color.BLUE); // Set error color to blue
        } else {
            // If the user selects 'No', no functionality is performed
            JOptionPane.showMessageDialog(this, "Action cancelled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSupplyActionPerformed

    /**
     * Action event handler for the Remove button. This method prompts the user
     * for confirmation before removing the selected drone from the drone table
     * (tblDrone) and the associated drone list (droneList). It provides
     * feedback messages based on whether the removal was successful or if no
     * drone was selected.
     *
     * The method performs the following: 1. Prompts the user with a
     * confirmation dialog before proceeding with the removal. 2. Checks if a
     * row is selected in the drone table. 3. If a row is selected, it removes
     * the corresponding drone from the list and table. 4. Displays a success
     * message if the drone is removed successfully. 5. Displays an error
     * message if no drone is selected for removal. 6. Cancels the action if the
     * user selects 'No' in the confirmation dialog.
     *
     * @param evt The event triggered by the Remove button click.
     */
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        // Show confirmation dialog
        lblErrorDroneId.setText("");
        lblMessage.setText("");
        int response = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to remove this drone?",
                "Confirm Action",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // If user selects 'Yes'
        if (response == JOptionPane.YES_OPTION) {
            int selectedRow = tblDrone.getSelectedRow(); // Get selected row

            if (selectedRow != -1) { // Check if a row is selected
                // Remove data from the studentList
                droneList.remove(selectedRow);

                // Remove data from the table
                DefaultTableModel model = (DefaultTableModel) tblDrone.getModel();
                model.removeRow(selectedRow);

                lblMessage.setText("Drone removed successfully.");
                lblMessage.setForeground(Color.BLUE);
            } else {
                lblMessage.setText("No drone selected for removal!");
                lblMessage.setForeground(Color.RED);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Action cancelled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * Checks if a drone ID already exists in the list of drones. This method
     * iterates through the drone list and checks if the provided drone ID
     * matches any existing drone's ID. It returns `true` if the drone ID
     * exists, and `false` if it does not.
     *
     * @param droneId The drone ID to check for existence.
     * @return boolean Returns true if the drone ID exists, false if it is
     * unique.
     */
    private boolean isDroneIdExists(int droneId) {
        // Replace 'droneList' with the actual list or database storing drone data
        for (DroneModel drone : droneList) {
            if (drone.getDroneId() == droneId) {
                return true; // Drone ID already exists
            }
        }
        return false; // Drone ID is unique
    }

    /**
     * Highlights an invalid text field by changing its border and title color.
     * This method applies a titled border with a specified color and title to
     * the given JTextField, indicating that the field is invalid. It also sets
     * the text field's size and ensures it is properly revalidated and
     * repainted.
     *
     * @param textField The JTextField to highlight.
     * @param title The title to display in the border, typically an error
     * message or field name.
     * @param color The color of the border and title, typically indicating an
     * error (e.g., red for invalid).
     */
    private void highlightInvalidField(JTextField textField, String title, Color color) {
        // Create titled border
        TitledBorder titledBorder = BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(color, 1), // Border with desired color
                title,
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.TOP, // Position the title at the top
                new Font("Segoe UI", Font.BOLD, 14), // Made font bold and size 14 to match resetFieldBorderWithTitle
                color
        );

        // Set border padding
        Border padding = BorderFactory.createEmptyBorder(2, 5, 2, 5);

        // Combine borders
        textField.setBorder(BorderFactory.createCompoundBorder(titledBorder, padding));

        // Set size
        textField.setPreferredSize(new Dimension(150, 45));

        // Prevent layout issues
        textField.revalidate();
        textField.repaint();
    }

    /**
     * Resets the border and title of a text field to its default state. This
     * method applies a titled border with a specified title and color to the
     * given JTextField, typically used when the field is valid or cleared. It
     * also adjusts the size of the text field to ensure proper layout and
     * refreshes the component to reflect the changes.
     *
     * @param textField The JTextField to reset the border and title for.
     * @param title The title to display in the border, typically the field
     * name.
     */
    private void resetFieldBorderWithTitle(JTextField textField, String title) {
        // Create titled border
        TitledBorder titledBorder = BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(140, 140, 140), 1), // Border color
                title,
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.TOP, // Position the title at the top
                new Font("Segoe UI", Font.BOLD, 14), // Changed to plain font, smaller size
                new Color(26, 82, 117) // Title color matches border color
        );

        // Set border padding
        Border padding = BorderFactory.createEmptyBorder(2, 5, 2, 5);

        // Combine borders
        textField.setBorder(BorderFactory.createCompoundBorder(titledBorder, padding));

        // Set size
        textField.setPreferredSize(new Dimension(150, 45));

        // Refresh the component
        textField.revalidate();
        textField.repaint();
    }

    /**
     * Handles the action of adding a new drone by validating the input fields
     * and ensuring there are no duplicates in the system. If the data is valid,
     * the drone is added to the list and the user is notified of the success.
     * If the data is invalid, the user is prompted with error messages.
     *
     * @param evt The action event triggered when the "Add" button is clicked.
     */
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:

        // Show confirmation dialog
        int response = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to proceed?",
                "Confirm Action",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // If user selects 'Yes'
        if (response == JOptionPane.YES_OPTION) {
            // Get input data
            String droneId = txtDroneId.getText();
            String status = cmbStatus.getSelectedItem().toString();
            String requesterName = txtRequesterName.getText();
            String itemName = txtItemName.getText();
            String location = txtLocation.getText();
            String emergencyContact = txtEmergencyContact.getText();
            String weatherCondition = cmbWeatherCondition.getSelectedItem().toString();
            String loadCapacity = txtLoadCapacity.getText();

            // Validation check
            boolean isValid = true; // Flag to check overall validation

            if (!ValidationUtil.isValidDroneId(droneId, lblErrorDroneId)) {
                isValid = false;
                highlightInvalidField(txtDroneId, "DroneID", Color.RED);

            } else {
                resetFieldBorderWithTitle(txtDroneId, "DroneID");
                lblErrorDroneId.setText("");
            }

            if (!ValidationUtil.isValidRequesterName(requesterName, lblErrorRequesterName)) {
                isValid = false;
                highlightInvalidField(txtRequesterName, "RequesterName", Color.RED);

            } else {
                resetFieldBorderWithTitle(txtRequesterName, "RequesterName");
                lblErrorRequesterName.setText("");
            }

            if (!ValidationUtil.isValidLocation(location, lblErrorLocation)) {
                isValid = false;
                highlightInvalidField(txtLocation, "Location", Color.RED);

            } else {
                resetFieldBorderWithTitle(txtLocation, "Location");
                lblErrorLocation.setText("");
            }

            if (!ValidationUtil.isValidItemName(itemName, lblErrorItemName)) {
                isValid = false;
                highlightInvalidField(txtItemName, "ItemName", Color.RED);

            } else {
                resetFieldBorderWithTitle(txtItemName, "ItemName");
                lblErrorItemName.setText("");
            }

            if (!ValidationUtil.isValidEmergencyContact(emergencyContact, lblErrorEmergencyContact)) {
                isValid = false;
                highlightInvalidField(txtEmergencyContact, "EmergencyContact", Color.RED);

            } else {
                resetFieldBorderWithTitle(txtEmergencyContact, "EmergencyContact");
                lblErrorEmergencyContact.setText("");
            }

            if (!ValidationUtil.isValidLoadCapacity(loadCapacity, lblErrorLoadCapacity)) {
                isValid = false;
                highlightInvalidField(txtLoadCapacity, "LoadCapacity(kg)", Color.RED);

            } else {
                resetFieldBorderWithTitle(txtLoadCapacity, "LoadCapacity(kg)");
                lblErrorLoadCapacity.setText("");
            }

            if (isValid) {
                lblErrorDroneId.setText("");

                int droneIdValue = Integer.parseInt(droneId); // Convert droneId to int

                // Check if droneID already exists
                if (isDroneIdExists(droneIdValue)) { // Call the method to check duplicate IDs
                    lblMessage.setText("DroneID " + droneId + " already exists and cannot be added!");
                    lblMessage.setForeground(Color.RED);

                } else {
                    // Create a new DroneModel
                    double loadCapacityValue = Double.parseDouble(loadCapacity);
                    DroneModel drone = new DroneModel(droneIdValue, status, requesterName, itemName, location, emergencyContact, weatherCondition, loadCapacityValue);

                    // Register the drone
                    registerDrone(drone);

                    lblMessage.setText("Your data has been successfully added.");
                    lblMessage.setForeground(Color.BLUE);
                }
            } else {
                lblMessage.setText("Please enter valid data for all fields.");
                lblMessage.setForeground(Color.RED);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Action cancelled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * Handles the action of launching the next drone from the deployment queue.
     * The method checks if there are drones in the queue, and if so, dequeues
     * the first drone, updates the deployment table, and removes the drone from
     * the inspection list. It also provides feedback to the user.
     *
     * @param evt The action event triggered when the "Launch" button is
     * clicked.
     */
    private final CustomQueue vivaQueue = new CustomQueue(100); // Assuming a capacity of 100.
    private void btnLaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaunchActionPerformed
        // TODO add your handling code here:
        // Check if there are drones in the queue
        lblErrorDroneId.setText("");
        int response = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to launch the next drone?",
                "Confirm Launch",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // If user selects 'Yes' (response = JOptionPane.YES_OPTION)
        if (response == JOptionPane.YES_OPTION) {

            if (!vivaQueue.isEmpty()) {
                // Dequeue the first drone from deployQueue
                DroneModel drone = vivaQueue.deQueue();

                // Add the drone to tblDroneAfterDeploymentList
                DefaultTableModel modelAfterDeployment = (DefaultTableModel) tblStudentAfterVivaList.getModel();
                modelAfterDeployment.addRow(new Object[]{
                    drone.getDroneId(), drone.getStatus(), drone.getRequesterName(),
                    drone.getItemName(), drone.getLocation(), drone.getEmergencyContact(),
                    drone.getWeatherCondition(), drone.getLoadCapacity()
                });

                // Remove the first row from tblDroneInspectionList
                DefaultTableModel modelInspectionList = (DefaultTableModel) tblStudentVivaList.getModel();
                if (modelInspectionList.getRowCount() > 0) {
                    modelInspectionList.removeRow(0); // Removes the first row from tblDroneInspectionList
                }

                lblErrorDroneId.setText("Drone has been successfully launched.");
                lblErrorDroneId.setForeground(Color.BLUE); // Set error color to blue
            } else {
                // If the queue is empty, show a message
                JOptionPane.showMessageDialog(this, "No more drones in the deployment queue.", "Queue Empty", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            // If the user selects 'No', no functionality is performed
            JOptionPane.showMessageDialog(this, "Launch action cancelled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnLaunchActionPerformed

    private void txtEmergencyContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmergencyContactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmergencyContactActionPerformed

    /**
     * Handles the action of clearing all fields in the form. A confirmation
     * dialog is displayed before clearing the fields. If the user confirms, all
     * fields are cleared, and a success message is displayed.
     *
     * @param evt The action event triggered when the "Clear" button is clicked.
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        // Clear all text fields
        lblErrorDroneId.setText("");
        int response = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to clear all fields?",
                "Confirm Action",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // If user selects 'Yes' (response = JOptionPane.YES_OPTION)
        if (response == JOptionPane.YES_OPTION) {
            txtDroneId.setText("");
            txtLoadCapacity.setText("");
            txtItemName.setText("");
            cmbWeatherCondition.setSelectedIndex(0);
            txtLocation.setText("");
            txtEmergencyContact.setText("");
            txtRequesterName.setText("");
            cmbWeatherCondition.setSelectedIndex(0);

            // Show a success message
            lblMessage.setText("All fields have been cleared");
            lblMessage.setForeground(Color.BLUE);

        } else {
            // If the user selects 'No', no functionality is performed
            JOptionPane.showMessageDialog(this, "Action cancelled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * Handles the action of switching to the 'About Us' tab when the 'Explore'
     * button is clicked. The currently active tab is changed to the pnlAboutUs
     * panel.
     *
     * @param evt The action event triggered when the "Explore" button is
     * clicked.
     */
    private void btnHomeExploreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeExploreActionPerformed
        // TODO add your handling code here:
        // Switch the currently selected tab to the pnlAboutUs panel
        tabPaneMain.setSelectedComponent(pnlAboutUs);
    }//GEN-LAST:event_btnHomeExploreActionPerformed

    /**
     * Handles the mouse click event on the drone table. When a row is clicked:
     * 1. Updates the background and text color of the selected row. 2.
     * Populates the corresponding input fields with data from the selected row.
     *
     * @param evt The mouse event triggered by the click on the table row.
     */
    private void tblDroneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDroneMouseClicked
        // TODO add your handling code here:
        tblDrone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDrone.setSelectionBackground(new Color(173, 216, 230)); // Light Blue color
                tblDrone.setSelectionForeground(Color.BLACK); // Black text for selection
                int selectedRow = tblDrone.getSelectedRow();
                if (selectedRow != -1) {
                    txtDroneId.setText(tblDrone.getValueAt(selectedRow, 0).toString());
                    cmbStatus.setSelectedItem(tblDrone.getValueAt(selectedRow, 1).toString()); // For JComboBox

                    //txtStatus1.setText(tblStudent.getValueAt(selectedRow, 1).toString());
                    txtRequesterName.setText(tblDrone.getValueAt(selectedRow, 2).toString());
                    txtItemName.setText(tblDrone.getValueAt(selectedRow, 3).toString());
                    txtLocation.setText(tblDrone.getValueAt(selectedRow, 4).toString());
                    txtEmergencyContact.setText(tblDrone.getValueAt(selectedRow, 5).toString());
                    cmbWeatherCondition.setSelectedItem(tblDrone.getValueAt(selectedRow, 6).toString());

                    //txtWeatherCondition.setText(tblStudent.getValueAt(selectedRow, 6).toString());
                    txtLoadCapacity.setText(tblDrone.getValueAt(selectedRow, 7).toString());
                }
            }
        });
    }//GEN-LAST:event_tblDroneMouseClicked

    /**
     * Checks if the given drone ID already exists in the list, excluding the
     * current row.
     *
     * @param droneId The drone ID to check for duplicates.
     * @param currentRow The index of the current row being updated, to be
     * excluded from the check.
     * @return true if the drone ID exists in another row, false if it is
     * unique.
     */
    private boolean isDroneIdExistsForUpdate(int droneId, int currentRow) {
        for (int i = 0; i < droneList.size(); i++) {
            if (i != currentRow && droneList.get(i).getDroneId() == droneId) {
                return true; // Drone ID already exists in another row
            }
        }
        return false; // Drone ID is unique for update
    }

    /**
     * Handles the update action when the "Update" button is clicked. This
     * method performs the following operations:
     * <ul>
     * <li>Displays a confirmation dialog to ensure the user wants to update the
     * drone's data.</li>
     * <li>Validates the input fields to ensure they contain correct and valid
     * data.</li>
     * <li>Checks if the updated Drone ID already exists in the list (excluding
     * the current row).</li>
     * <li>If all validations pass and the Drone ID is unique, updates the table
     * and internal list with the new drone information.</li>
     * <li>Displays appropriate success or error messages based on the
     * validation results.</li>
     * </ul>
     *
     * <p>
     * In case the validation fails or the Drone ID already exists, the user
     * will be informed with an error message. If no row is selected in the
     * table, the user will be prompted with an error message stating that no
     * row has been selected for updating.</p>
     *
     * @param evt The event triggered when the user clicks the "Update" button.
     */
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        // Show confirmation dialog
        int response = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to update the selected drone's data?",
                "Confirm Update",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // If user selects 'Yes'
        if (response == JOptionPane.YES_OPTION) {
            int selectedRow = tblDrone.getSelectedRow();
            if (selectedRow != -1) {
                // Get updated values from text fields
                String droneId = txtDroneId.getText();
                String status = cmbStatus.getSelectedItem().toString();
                String requesterName = txtRequesterName.getText();
                String itemName = txtItemName.getText();
                String location = txtLocation.getText();
                String emergencyContact = txtEmergencyContact.getText();
                String weatherCondition = cmbWeatherCondition.getSelectedItem().toString();
                String loadCapacity = txtLoadCapacity.getText();

                // Validation check
                boolean isValid = true; // Flag to check overall validation

                if (!ValidationUtil.isValidDroneId(droneId, lblErrorDroneId)) {
                    isValid = false;
                    highlightInvalidField(txtDroneId, "DroneID", Color.RED);
                } else {
                    resetFieldBorderWithTitle(txtDroneId, "DroneID");
                    lblErrorDroneId.setText("");
                }

                if (!ValidationUtil.isValidRequesterName(requesterName, lblErrorRequesterName)) {
                    isValid = false;
                    highlightInvalidField(txtRequesterName, "RequesterName", Color.RED);
                } else {
                    resetFieldBorderWithTitle(txtRequesterName, "RequesterName");
                    lblErrorRequesterName.setText("");
                }

                if (!ValidationUtil.isValidLocation(location, lblErrorLocation)) {
                    isValid = false;
                    highlightInvalidField(txtLocation, "Location", Color.RED);
                } else {
                    resetFieldBorderWithTitle(txtLocation, "Location");
                    lblErrorLocation.setText("");
                }

                if (!ValidationUtil.isValidItemName(itemName, lblErrorItemName)) {
                    isValid = false;
                    highlightInvalidField(txtItemName, "ItemName", Color.RED);
                } else {
                    resetFieldBorderWithTitle(txtItemName, "ItemName");
                    lblErrorItemName.setText("");
                }

                if (!ValidationUtil.isValidEmergencyContact(emergencyContact, lblErrorEmergencyContact)) {
                    isValid = false;
                    highlightInvalidField(txtEmergencyContact, "EmergencyContact", Color.RED);
                } else {
                    resetFieldBorderWithTitle(txtEmergencyContact, "EmergencyContact");
                    lblErrorEmergencyContact.setText("");
                }

                if (!ValidationUtil.isValidLoadCapacity(loadCapacity, lblErrorLoadCapacity)) {
                    isValid = false;
                    highlightInvalidField(txtLoadCapacity, "LoadCapacity(kg)", Color.RED);
                } else {
                    resetFieldBorderWithTitle(txtLoadCapacity, "LoadCapacity(kg)");
                    lblErrorLoadCapacity.setText("");
                }

                if (isValid) {
                    lblErrorDroneId.setText("");

                    int droneIdValue = Integer.parseInt(droneId);

                    // Check if the updated Drone ID already exists, excluding the current row
                    if (isDroneIdExistsForUpdate(droneIdValue, selectedRow)) {
                        lblMessage.setText("DroneID " + droneId + " already exists and cannot be updated!");
                        lblMessage.setForeground(Color.BLUE);
                    } else {
                        // Update the table
                        tblDrone.setValueAt(droneId, selectedRow, 0);
                        tblDrone.setValueAt(cmbStatus.getSelectedItem().toString(), selectedRow, 1);
                        tblDrone.setValueAt(requesterName, selectedRow, 2);
                        tblDrone.setValueAt(itemName, selectedRow, 3);
                        tblDrone.setValueAt(location, selectedRow, 4);
                        tblDrone.setValueAt(emergencyContact, selectedRow, 5);
                        tblDrone.setValueAt(cmbWeatherCondition.getSelectedItem().toString(), selectedRow, 6);
                        tblDrone.setValueAt(loadCapacity, selectedRow, 7);

                        // Update the student list (or database)
                        DroneModel updatedStudent = new DroneModel(
                                Integer.parseInt(droneId),
                                status,
                                requesterName,
                                itemName,
                                location,
                                emergencyContact,
                                weatherCondition,
                                Double.parseDouble(loadCapacity)
                        );
                        droneList.set(selectedRow, updatedStudent); // Update in-memory list

                        // Show a success message
                        lblMessage.setText("Data successfully updated!");
                        lblMessage.setForeground(Color.BLUE);
                    }
                } else {
                    // If validation fails, show an error message
                    lblMessage.setText("Invalid data! Please check inputs.");
                    lblMessage.setForeground(Color.RED);
                    //JOptionPane.showMessageDialog(this, "Invalid data! Please check inputs.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // If no row is selected, show an error message
                lblMessage.setText("No row selected to update!");
                lblMessage.setForeground(Color.RED);
                //JOptionPane.showMessageDialog(this, "No row selected to update!", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            // If the user selects 'No', no functionality is performed
            JOptionPane.showMessageDialog(this, "Update action cancelled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtSearchValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchValueActionPerformed

    /**
     * Handles the sorting of drone data based on the selected field (Drone ID,
     * Item Name, or Location) and sorting order (Ascending/Descending). It uses
     * different sorting algorithms for each field:
     * <ul>
     * <li>Selection Sort for Drone ID</li>
     * <li>Insertion Sort for Item Name</li>
     * <li>Merge Sort for Location</li>
     * </ul>
     * The method checks for valid selections and displays an error message if
     * needed. After sorting, the data is loaded into the table.
     *
     * @param evt The event triggered when the "Sort" button is clicked.
     */
    private void btnSortingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortingActionPerformed
        // TODO add your handling code here:
        // Retrieve the selected field and sorting order from combo boxes
        String selectedField = cmbSortBy.getSelectedItem().toString();  // For selecting Drone ID, ItemName, or Location
        String selectedOrder = cmbSelectionSortingOrder.getSelectedItem().toString();  // For selecting Ascending/Descending

        // Check if a valid field is selected
        if (selectedField.equals("Select Field")) {
            JOptionPane.showMessageDialog(this, "Please select a valid field for sorting (Drone ID, ItemName, or Location).", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit if no field is selected
        }

        // Determine the sort order: true for descending, false for ascending
        boolean isDesc = selectedOrder.equals("Descending");

        // Initialize the sorted list variable
        List<DroneModel> sortedList = null;

        // Sort the data based on the selected field
        if (selectedField.equals("Drone ID")) {
            // Use SelectionSort for Drone ID
            SelectionSort selectionSort = new SelectionSort();
            sortedList = selectionSort.sortByDroneId(droneList, isDesc);
        } else if (selectedField.equals("ItemName")) {
            // Use InsertionSort for ItemName
            InsertionSort insertionSort = new InsertionSort();
            sortedList = insertionSort.sortByItemName(droneList, isDesc);
        } else if (selectedField.equals("Location")) {
            // Use MergeSort for Location
            MergeSort mergeSort = new MergeSort();
            sortedList = mergeSort.sortByLocation(droneList, isDesc);
        }

        // Check if sortedList is not null before loading it into the table
        if (sortedList != null && !sortedList.isEmpty()) {
            loadListToTable(sortedList);
        } else {
            JOptionPane.showMessageDialog(this, "No data available for sorting.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSortingActionPerformed

    /**
     * Populates the table with drone data from the provided list of DroneModel
     * objects. Clears any existing rows in the table before adding new data.
     *
     * @param droneList The list of DroneModel objects containing the data to be
     * displayed.
     */
    private void loadListToTable(List<DroneModel> droneList) {
        DefaultTableModel model = (DefaultTableModel) tblDroneInformation.getModel();

        //clear existing rows if needed
        model.setRowCount(0);

        //populate the table with drone data
        droneList.forEach(drone -> model.addRow(new Object[]{
            drone.getDroneId(),
            drone.getStatus(),
            drone.getRequesterName(),
            drone.getItemName(),
            drone.getLocation(),
            drone.getEmergencyContact(),
            drone.getWeatherCondition(),
            drone.getLoadCapacity()
        }));
    }

    /**
     * Handles the search action when the user initiates a search for a specific
     * drone. Validates input, sorts the drone list, and performs a binary
     * search based on the selected column. Displays the search result in the
     * UI.
     *
     * @param evt The event that triggered this action.
     */
    private void btnSearchingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchingActionPerformed
        // Get user inputs
        String searchValue = txtSearchValue.getText().trim();
        String selectedColumn = cmbSearchBy.getSelectedItem().toString();

        // Validate input
        if (searchValue.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a value to search.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        BinarySearch binarySearch = new BinarySearch();
        // Sort the drone list based on the selected column
        sortDroneList(selectedColumn);

        // Perform binary search
        DroneModel result = binarySearch.searchByField(searchValue, selectedColumn, droneList, 0, droneList.size() - 1);

        // Display result
        showSearchResult(result);
    }//GEN-LAST:event_btnSearchingActionPerformed

    /**
     * Sorts the drone list based on the selected column (Drone ID, Item Name,
     * or Location). The sorting order is set to ascending, and a specific
     * sorting algorithm (SelectionSort, InsertionSort, or MergeSort) is applied
     * based on the selected column.
     *
     * @param selectedColumn The column by which the drone list should be sorted
     * (e.g., "Drone ID", "ItemName", or "Location").
     */
    private void sortDroneList(String selectedColumn) {
        // Sorting based on selected column
//        if (selectedColumn.equals("Drone ID")) {
//            droneList.sort(Comparator.comparingInt(DroneModel::getDroneId)); // Sort by Drone ID

        SelectionSort selectionSort = new SelectionSort();
        InsertionSort insertionSort = new InsertionSort();
        MergeSort mergeSort = new MergeSort();
        if (selectedColumn.equals("Drone ID")) {
            // Sort in Ascending order
            boolean isDesc = false;
            // Sort the droneList using SelectionSort
            droneList = selectionSort.sortByDroneId(droneList, isDesc);

        } else if (selectedColumn.equals("ItemName")) {
            // Choose sorting order (true for descending, false for ascending)
            boolean isDesc = false; // Set to 'true' for descending, 'false' for ascending

            // Sort the droneList using InsertionSort
            droneList = insertionSort.sortByItemName(droneList, isDesc);

        } else if (selectedColumn.equals("Location")) {
            // Choose sorting order (true for descending, false for ascending)
            boolean isDesc = false; // Set to 'true' for descending, 'false' for ascending

            // Sort the droneList using InsertionSort
            droneList = mergeSort.sortByLocation(droneList, isDesc);
        }
    }

    /**
     * Displays the search result in a table format within a dialog box. If no
     * result is found, it shows an information message. The table displays the
     * details of the matching drone based on the search query. The dialog box
     * displays the table with custom column widths for better visibility.
     *
     * @param result The DroneModel object representing the matching search
     * result.
     */
    // Display search results in table format
    public void showSearchResult(DroneModel result) {
        if (result == null) {
            JOptionPane.showMessageDialog(null, "No matching record found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Create column names
        String[] columnNames = {"Drone ID", "Status", "RequesterName",
            "ItemName", "Location", "EmergencyContact",
            "WeatherCondition", "LoadCapacity(kg)"};

        // Create data for the table
        Object[][] data = {
            {result.getDroneId(), result.getStatus(), result.getRequesterName(),
                result.getItemName(), result.getLocation(), result.getEmergencyContact(),
                result.getWeatherCondition(), result.getLoadCapacity()}
        };

        // Create table model and table
        DefaultTableModel tableModel = new DefaultTableModel(data, columnNames);
        JTable table = new JTable(tableModel);

        // Set preferred width for columns for better visibility
        table.getColumnModel().getColumn(0).setPreferredWidth(100); // Drone ID column
        table.getColumnModel().getColumn(1).setPreferredWidth(130); // Status column
        table.getColumnModel().getColumn(2).setPreferredWidth(130); // RequesterName column
        table.getColumnModel().getColumn(3).setPreferredWidth(130); // ItemName column
        table.getColumnModel().getColumn(4).setPreferredWidth(130); // Location column
        table.getColumnModel().getColumn(5).setPreferredWidth(150); // EmergencyContact column
        table.getColumnModel().getColumn(6).setPreferredWidth(100); // WeatherCondition column
        table.getColumnModel().getColumn(7).setPreferredWidth(150); // LoadCapacity(kg) column

        // Create a scroll pane and set the preferred size for the dialog box
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setPreferredSize(new Dimension(1200, 100)); // Adjust width (800) and height (300)

        // Show the table in a dialog box with a custom size
        JOptionPane optionPane = new JOptionPane(scrollPane, JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION);
        JDialog dialog = optionPane.createDialog(null, "Search Result");
        dialog.setSize(1200, 100);  // Set the dialog box size (width: 1000, height: 400)
        dialog.setVisible(true);
        // Show table in dialog box
        // JOptionPane.showMessageDialog(null, new JScrollPane(table), "Search Result", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Handles the search action for the button click event. It clears the error
     * message and copies the rows from the `tblDrone` table to the
     * `tblDroneInspectionList` table. The rows from `tblDrone` are copied to
     * avoid duplicates and then the current tab is switched to the
     * `pnlVivaList` panel.
     *
     * @param evt The event triggered by the button click.
     */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        // Show confirmation dialog
        lblErrorDroneId.setText("");

        // Get the table models for tblDrone and tblDroneInspectionList
        DefaultTableModel droneModel = (DefaultTableModel) tblDrone.getModel();
        DefaultTableModel inspectionModel = (DefaultTableModel) tblDroneInformation.getModel();

        // Clear existing rows in tblDroneInspectionList to avoid duplicates
        inspectionModel.setRowCount(0);

        // Loop through rows in tblDrone and copy to tblDroneInspectionList
        for (int i = 0; i < droneModel.getRowCount(); i++) {
            Object[] rowData = new Object[droneModel.getColumnCount()];
            for (int j = 0; j < droneModel.getColumnCount(); j++) {
                rowData[j] = droneModel.getValueAt(i, j); // Copy cell data
            }
            inspectionModel.addRow(rowData); // Add the row to tblDroneInspectionList
        }

        // Switch the currently selected tab to the pnlAboutUs panel
        tabPaneMain.setSelectedComponent(pnlVivaList);

    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * Handles the sort action for the button click event. It clears any
     * existing error message, copies the rows from the `tblDrone` table to the
     * `tblDroneInspectionList` table, and ensures there are no duplicate
     * entries in the `tblDroneInspectionList`. Afterward, the currently
     * selected tab is switched to the `pnlVivaList` panel.
     *
     * @param evt The event triggered by the button click.
     */
    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        // TODO add your handling code here:
        lblErrorDroneId.setText("");
        // Get the table models for tblDrone and tblDroneInspectionList
        DefaultTableModel droneModel = (DefaultTableModel) tblDrone.getModel();
        DefaultTableModel inspectionModel = (DefaultTableModel) tblDroneInformation.getModel();

        // Clear existing rows in tblDroneInspectionList to avoid duplicates
        inspectionModel.setRowCount(0);

        // Loop through rows in tblDrone and copy to tblDroneInspectionList
        for (int i = 0; i < droneModel.getRowCount(); i++) {
            Object[] rowData = new Object[droneModel.getColumnCount()];
            for (int j = 0; j < droneModel.getColumnCount(); j++) {
                rowData[j] = droneModel.getValueAt(i, j); // Copy cell data
            }
            inspectionModel.addRow(rowData); // Add the row to tblDroneInspectionList
        }

        // Switch the currently selected tab to the pnlAboutUs panel
        tabPaneMain.setSelectedComponent(pnlVivaList);

    }//GEN-LAST:event_btnSortActionPerformed

    /**
     * Handles the sort action for the button click event. It clears any
     * existing error message, copies the rows from the `tblDrone` table to the
     * `tblDroneInspectionList` table, and ensures there are no duplicate
     * entries in the `tblDroneInspectionList`. Afterward, the currently
     * selected tab is switched to the `pnlVivaList` panel.
     *
     * @param evt The event triggered by the button click.
     */
    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
        lblErrorDroneId.setText("");
        // Get the table models for tblDrone and tblDroneInspectionList
        DefaultTableModel droneModel = (DefaultTableModel) tblDrone.getModel();
        DefaultTableModel inspectionModel = (DefaultTableModel) tblDroneInformation.getModel();

        // Clear existing rows in tblDroneInspectionList to avoid duplicates
        inspectionModel.setRowCount(0);

        // Loop through rows in tblDrone and copy to tblDroneInspectionList
        for (int i = 0; i < droneModel.getRowCount(); i++) {
            Object[] rowData = new Object[droneModel.getColumnCount()];
            for (int j = 0; j < droneModel.getColumnCount(); j++) {
                rowData[j] = droneModel.getValueAt(i, j); // Copy cell data
            }
            inspectionModel.addRow(rowData); // Add the row to tblDroneInspectionList
        }

        // Switch the currently selected tab to the pnlAboutUs panel
        tabPaneMain.setSelectedComponent(pnlVivaList);

    }//GEN-LAST:event_btnViewDetailsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MediCareDrone.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MediCareDrone.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MediCareDrone.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MediCareDrone.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        MediCareDrone app = new MediCareDrone();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            app.setVisible(true);
        });
        System.out.println("drone App Started");
        app.startProgress();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel VivaInfoAfter;
    private javax.swing.JLabel VivaInfoBefore;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnHomeExplore;
    private javax.swing.JButton btnLaunch;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearching;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btnSorting;
    private javax.swing.JButton btnSupply;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JComboBox<String> cmbSearchBy;
    private javax.swing.JComboBox<String> cmbSelectionSortingOrder;
    private javax.swing.JComboBox<String> cmbSortBy;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JComboBox<String> cmbWeatherCondition;
    private javax.swing.JLabel formTitle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jtoolRedColor;
    private javax.swing.JToolBar jtoolRedColor1;
    private javax.swing.JLabel lblAdminDashboard;
    private javax.swing.JLabel lblBatterySubTitle;
    private javax.swing.JLabel lblBatteryTitle;
    private javax.swing.JLabel lblDashImage;
    private javax.swing.JLabel lblDashboardImageUp;
    private javax.swing.JLabel lblDroneBackground;
    private javax.swing.JLabel lblDroneInformation;
    private javax.swing.JLabel lblDroneLogo;
    private javax.swing.JLabel lblErrorDroneId;
    private javax.swing.JLabel lblErrorEmergencyContact;
    private javax.swing.JLabel lblErrorItemName;
    private javax.swing.JLabel lblErrorLoadCapacity;
    private javax.swing.JLabel lblErrorLocation;
    private javax.swing.JLabel lblErrorRequesterName;
    private javax.swing.JLabel lblHomeBgImage;
    private javax.swing.JLabel lblHomeSubtitle1;
    private javax.swing.JLabel lblHomeTitle;
    private javax.swing.JLabel lblLoading;
    private javax.swing.JLabel lblLoadingBgImage;
    private javax.swing.JLabel lblLoginBgImage;
    private javax.swing.JLabel lblLoginError;
    private javax.swing.JLabel lblLoginForgotPwd;
    private javax.swing.JLabel lblLoginSubTitle;
    private javax.swing.JLabel lblLoginTitle;
    private javax.swing.JLabel lblMainKeyPoints;
    private javax.swing.JLabel lblMainSubTitle;
    private javax.swing.JLabel lblMainSubTitle1;
    private javax.swing.JLabel lblMainTitle;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblMotorProtection;
    private javax.swing.JLabel lblMotorProtectionSubTitle;
    private javax.swing.JLabel lblMotorSubTitle;
    private javax.swing.JLabel lblOurPhilosophy;
    private javax.swing.JLabel lblPhilosophy;
    private javax.swing.JLabel lblPropeller;
    private javax.swing.JLabel lblPropellerSubTitle;
    private javax.swing.JLabel lblQuardTitle;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblSlogan;
    private javax.swing.JLabel lblSort;
    private javax.swing.JLabel lblSumanDirector;
    private javax.swing.JLabel lblSumanImage;
    private javax.swing.JLabel lblTblStudentTitle;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblcollegelogo;
    private javax.swing.JProgressBar pgBarSplashScreen;
    private javax.swing.JPanel pnlAboutUs;
    private javax.swing.JPanel pnlAdminControl;
    private javax.swing.JPanel pnlBackgroundColor;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlButton1;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlLoadingScreen;
    private javax.swing.JPanel pnlLoginScreen;
    private javax.swing.JPanel pnlMainBar;
    private javax.swing.JPanel pnlMainScreen;
    private javax.swing.JPanel pnlPhilosophy;
    private javax.swing.JPanel pnlStudentList;
    private javax.swing.JPanel pnlVivaList;
    private javax.swing.JPasswordField pwdFldLogin;
    private javax.swing.JScrollPane spTblStudent;
    private javax.swing.JScrollPane spTblStudentViva1;
    private javax.swing.JScrollPane spTblStudentVivaList;
    private javax.swing.JScrollPane spTblStudentVivaList1;
    private javax.swing.JTabbedPane tabPaneMain;
    private javax.swing.JTable tblDrone;
    private javax.swing.JTable tblDroneInformation;
    private javax.swing.JTable tblStudentAfterVivaList;
    private javax.swing.JTable tblStudentVivaList;
    private javax.swing.JTextField txtDroneId;
    private javax.swing.JTextField txtEmergencyContact;
    private javax.swing.JTextField txtFldLoginUsername;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtLoadCapacity;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtRequesterName;
    private javax.swing.JTextField txtSearchValue;
    // End of variables declaration//GEN-END:variables
}
